
addressService.address=http://localhost:8080/

#--> Legt eine test.mv.db-Datei an, welche die Daten enthählt. Führt man die enthaltene .jar-Datei aus, startet eine
#web-Anwendung. Dort wählt man dann auch unter jdbc-url den unteren Pfad und er lädt die Datenbank (Datei befindet
#sich ja unter diesem Namen im Projekt und .jar-File ja auch)
spring.datasource.url=jdbc:h2:./test

#Muss gemacht werder, da default-wert immer löcschen der Datenbank ist. So sollte komplettes persistieren klappen.
#Standard ist am Ende der Anwendung drop-Befehl ausführen.
spring.jpa.hibernate.ddl-auto=update

#Definieren der Datasource
spring.datasource.platform=h2

#SALT-Wert für Password-hasing (mit SHA512)
#Klar-Text: Hallo Liebe Bunte Schoene Grosse Weite Welt
authenticationService.salt=3656924c200de2d205821bc5224059dc8520d9ad4cb421e1d0e859b1ebe226b2b4b7001aa2a4bc6e744cc6d54bdfa8fdd90685d1d6dffa490b33f621cd88a519

authenticationService.jwt.secret=Severus Snape was a good guy!

#WICHTIG: Sorgt auch für die aktualisierung zu Laufzeit: Während des Runs daten ändern bewirkt aktualisierung nach refresh
#im browser
spring.resources.static-locations=file:./src/main/resources/public/